[{"C:\\Users\\ishuv\\OneDrive\\Desktop\\dalalstreet\\dalal\\ticks\\src\\index.js":"1","C:\\Users\\ishuv\\OneDrive\\Desktop\\dalalstreet\\dalal\\ticks\\src\\App.js":"2","C:\\Users\\ishuv\\OneDrive\\Desktop\\dalalstreet\\dalal\\ticks\\src\\reportWebVitals.js":"3","C:\\Users\\ishuv\\OneDrive\\Desktop\\dalalstreet\\dalal\\ticks\\src\\components\\View.js":"4","C:\\Users\\ishuv\\OneDrive\\Desktop\\dalalstreet\\dalal\\ticks\\src\\components\\Stock.js":"5"},{"size":577,"mtime":1691616977179,"results":"6","hashOfConfig":"7"},{"size":179,"mtime":1691616977164,"results":"8","hashOfConfig":"7"},{"size":375,"mtime":1691616977179,"results":"9","hashOfConfig":"7"},{"size":7837,"mtime":1691877003579,"results":"10","hashOfConfig":"7"},{"size":898,"mtime":1691616977164,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"a9z80m",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\ishuv\\OneDrive\\Desktop\\dalalstreet\\dalal\\ticks\\src\\index.js",[],[],"C:\\Users\\ishuv\\OneDrive\\Desktop\\dalalstreet\\dalal\\ticks\\src\\App.js",[],[],"C:\\Users\\ishuv\\OneDrive\\Desktop\\dalalstreet\\dalal\\ticks\\src\\reportWebVitals.js",[],[],"C:\\Users\\ishuv\\OneDrive\\Desktop\\dalalstreet\\dalal\\ticks\\src\\components\\View.js",["28","29","30"],[],"import React, { useState, useEffect } from 'react';\r\nimport DisplayStockData from './Stock';\r\nimport './Stock.css'\r\nimport mid from '../mid.png';\r\nimport dim from '../dim.png';\r\n\r\nfunction View() {\r\n  const [symbols, setSymbols] = useState([]);\r\n  const [stockData, setStockData] = useState([]);\r\n\r\n  const [nseStocks, setNseStocks] = useState([\r\n    { symbol: \"AAPL\" }, { symbol: \"ABNB\" }, { symbol: \"ADBE\" }, { symbol: \"ADI\" }, { symbol: \"ADP\" }, { symbol: \"AEP\" }, { symbol: \"ALGN\" }, { symbol: \"AMAT\" }, { symbol: \"AMD\" }, { symbol: \"AMGN\" }, { symbol: \"ANSS\" }, { symbol: \"ASML\" }, { symbol: \"AVGO\" }, { symbol: \"AZN\" }, { symbol: \"BIIB\" }, { symbol: \"BKNG\" }, { symbol: \"BKR\" }, { symbol: \"CDNS\" }, { symbol: \"CEG\" }, { symbol: \"CHTR\" }, { symbol: \"CMCSA\" }, { symbol: \"COST\" }, { symbol: \"CPRT\" }, { symbol: \"CRWD\" }, { symbol: \"CSCO\" }, { symbol: \"CSGP\" }, { symbol: \"CSX\" }, { symbol: \"CTAS\" }, { symbol: \"CTSH\" }, { symbol: \"DDOG\" }, { symbol: \"DLTR\" }, { symbol: \"DXCM\" }, { symbol: \"EA\" }, { symbol: \"EBAY\" }, { symbol: \"ENPH\" }, { symbol: \"EXC\" }, { symbol: \"FANG\" }, { symbol: \"FAST\" }, { symbol: \"FTNT\" }, { symbol: \"GFS\" }, { symbol: \"GILD\" }, { symbol: \"GOOG\" }, { symbol: \"GOOGL\" }, { symbol: \"HON\" }, { symbol: \"IDXX\" }, { symbol: \"ILMN\" }, { symbol: \"ISRG\" }, { symbol: \"JD\" }, { symbol: \"KDP\" }, { symbol: \"KHC\" }, { symbol: \"KLAC\" }, { symbol: \"LCID\" }, { symbol: \"LRCX\" }, { symbol: \"MAR\" }, { symbol: \"MCHP\" }, { symbol: \"MDLZ\" }, { symbol: \"MELI\" }, { symbol: \"META\" }, { symbol: \"MNST\" }, { symbol: \"MRNA\" }, { symbol: \"MRVL\" }, { symbol: \"MU\" }, { symbol: \"NFLX\" }, { symbol: \"NXPI\" }, { symbol: \"ODFL\" }, { symbol: \"ON\" }, { symbol: \"ORLY\" }, { symbol: \"PANW\" }, { symbol: \"PAYX\" }, { symbol: \"PCAR\" }, { symbol: \"PDD\" }, { symbol: \"PEP\" }, { symbol: \"PYPL\" }, { symbol: \"QCOM\" }, { symbol: \"REGN\" }, { symbol: \"ROST\" }, { symbol: \"SBUX\" }, { symbol: \"SGEN\" }, { symbol: \"SIRI\" }, { symbol: \"SNPS\" }, { symbol: \"TEAM\" }, { symbol: \"TMUS\" }, { symbol: \"TSLA\" }, { symbol: \"TTD\" }, { symbol: \"TXN\" }, { symbol: \"VRSK\" }, { symbol: \"VRTX\" }, { symbol: \"WBA\" }, { symbol: \"WBD\" }, { symbol: \"WDAY\" }, { symbol: \"XEL\" }, { symbol: \"ZM\" }, { symbol: \"ZS\" }\r\n\r\n  ]);\r\n\r\n  const handleAddSymbol = async (symbol) => {\r\n  if (symbols.length < 9 && !symbols.includes(symbol)) {\r\n    const response = await fetch(`/api/${symbol}/`);\r\n    const data = await response.json();\r\n    if (data.hasOwnProperty(\"error\")) {\r\n      alert(data.error);\r\n      return;\r\n    }\r\n    setSymbols([...symbols, symbol]);\r\n  } else {\r\n    alert(\"Symbol already entered or maximum limit reached (9)\");\r\n  }\r\n};\r\n\r\n   \r\n  const [sensexData, setSensexData] = useState({});\r\n  const arrow = sensexData.change > 0 ? '\\u25B2' : '\\u25BC';\r\n  useEffect(() => {\r\n    const fetchSensexData = async () => {\r\n      const response = await fetch('/api/NDAQ/');\r\n      const data = await response.json();\r\n      setSensexData(data);\r\n    };\r\n    fetchSensexData();\r\n  }, []);\r\n  \r\n  const [sensexDatai, setSensexDatai] = useState({});\r\n  const arrowi = sensexDatai.change > 0 ? '\\u25B2' : '\\u25BC';\r\n  useEffect(() => {\r\n    const fetchSensexDatai = async () => {\r\n      const response = await fetch('/api/^GSPC/');\r\n      const data = await response.json();\r\n      setSensexDatai(data);\r\n    };\r\n    fetchSensexDatai();\r\n  }, []);\r\n  \r\n\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      if (!symbols.length) {\r\n        return;\r\n      }\r\n      const urls = symbols.map(symbol => `/api/${symbol}/`);\r\n      const promises = urls.map(url => fetch(url).then(response => response.json()));\r\n      const data = await Promise.all(promises);\r\n      setStockData(data);\r\n    };\r\n    fetchData();\r\n  }, [symbols]);\r\n\r\n  useEffect(() => {\r\n    let sockets = [];\r\n    if (stockData.length) {\r\n      stockData.forEach(data => {\r\n        console.log(data.symbol);\r\n        const isSecureConnection = /^https:/.test(window.location.protocol);\r\n        const protocol = isSecureConnection ? \"wss\" : \"ws\";\r\n        const socket = new WebSocket(`${protocol}://${window.location.host}/ws/stock/${data.symbol}/`);\r\n        // const socket = new WebSocket(`ws://127.0.0.1:8000/ws/stock/${data.symbol}/`);\r\n        socket.onmessage = event => {\r\n          const updatedData = JSON.parse(event.data);\r\n          setStockData(prevData => prevData.map(item => (item.symbol === updatedData.symbol ? updatedData : item)));\r\n        };\r\n        sockets.push(socket);\r\n      });\r\n    }\r\n    return () => {\r\n      sockets.forEach(socket => socket.close());\r\n    };\r\n  }, [stockData]);\r\n\r\n  return (\r\n    <div className='f19'>\r\n      <div>\r\n        <div className=\"info-container\">\r\n          {stockData.map(data => (\r\n            <div key={data.symbol} >\r\n              <DisplayStockData stockData={data} />\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div className='grid'>\r\n        <form\r\n          onSubmit={event => {\r\n            event.preventDefault();\r\n            const symbol = event.target.symbol.value.toUpperCase();\r\n            handleAddSymbol(symbol);\r\n            event.target.symbol.value = '';\r\n          }}\r\n        >\r\n          <div className='two item'>\r\n            <input className='f19' type=\"text\" placeholder='ENTER STOCK'  name=\"symbol\"></input>\r\n            {/* <button type=\"submit\" >+</button> */}\r\n          </div>\r\n        </form>\r\n        {symbols.length > 0 ? (\r\n          <div className='four item'>\r\n            <div className=\"circles-grid\">\r\n              {[...Array(9)].map((_, i) => (\r\n                <div\r\n                  key={i}\r\n                  className={`circle ${i < symbols.length ? \"black\" : \"red\"}`}\r\n                ></div>\r\n              ))}\r\n            </div>\r\n            <div className=\"symbol-count\">\r\n            <span className=\"symbol-length\">{symbols.length}</span><a className='by'> / 9</a>\r\n              <button className='but f19' onClick={() => {\r\n                setSymbols([]);\r\n                setStockData([]);\r\n              }}>X</button>\r\n              \r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div className='four item'>\r\n            <div className=\"circles-grid\">\r\n              {[...Array(9)].map((_, i) => (\r\n                <div key={i} className=\"circle red\"></div>\r\n              ))}\r\n            </div>\r\n            <div className=\"symbol-count\">\r\n            <span className=\"symbol-length\">{symbols.length}</span><a className='by'> / 9</a> \r\n            </div>\r\n          </div>\r\n        )}\r\n        <div className='six item in-grid'>\r\n          <div className='ione'>\r\n            {sensexData && (\r\n              <>\r\n                <div>{sensexData.symbol}</div>\r\n                <div>{sensexData.price}</div>\r\n                <div>{arrow}{sensexData.pChange}</div>\r\n                <div>{sensexData.change}</div>\r\n              </>\r\n            )}\r\n          </div>\r\n          <div className='itwo'>\r\n            {sensexDatai && (\r\n              <>\r\n                <div>{sensexDatai.symbol}</div>\r\n                <div>{sensexDatai.price}</div>\r\n                <div>{arrowi}{sensexDatai.pChange}</div>\r\n                <div>{sensexDatai.change}</div>\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className='three element item'>\r\n           {nseStocks.map((stock) => (\r\n            <div\r\n              key={stock.symbol}\r\n              className=\"nse-stock\"\r\n              onClick={() => handleAddSymbol(stock.symbol)}\r\n            >\r\n               {stock.symbol}\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        <div className='th item'>\r\n          <img src={mid} width=\"200\" height=\"415\" alt=\"mid\" className='desk'/>\r\n          <img src={dim} width=\"200\" height=\"415\" alt=\"dim\" className='mob' />\r\n        </div>\r\n      </div>  \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default View;","C:\\Users\\ishuv\\OneDrive\\Desktop\\dalalstreet\\dalal\\ticks\\src\\components\\Stock.js",[],[],{"ruleId":"31","severity":1,"message":"32","line":11,"column":21,"nodeType":"33","messageId":"34","endLine":11,"endColumn":33},{"ruleId":"35","severity":1,"message":"36","line":125,"column":68,"nodeType":"37","endLine":125,"endColumn":86},{"ruleId":"35","severity":1,"message":"36","line":141,"column":68,"nodeType":"37","endLine":141,"endColumn":86},"no-unused-vars","'setNseStocks' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement"]